import{d as l,u as m,b as o,c as g,a as r,e as t,g as a,n,f as d,o as p,_ as x}from"./index-ChG7xkqo.js";import{H as i,p as c}from"./github-dark-DsXzy-Sw.js";const u={class:"leading-6 sm:leading-7 relative isolate max-w-full sm:max-w-3xl md:max-w-[800px] mx-auto px-3 sm:px-4 w-full text-slate-700 dark:text-gray-50 font-[ubuntu] font-feature-settings-kern font-feature-settings-liga font-feature-settings-calt"},b={class:"mb-6 sm:mb-8"},y=l({__name:"Week7BlogContent",setup(h){const s=m();return i.registerLanguage("python",c),o(()=>{i.highlightAll()}),(f,e)=>(p(),g("div",u,[e[6]||(e[6]=r('<p class="font-bold text-xl sm:text-3xl md:text-3xl lg:text-4xl mt-6 mb-4 leading-tight py-2 px-2 rounded-md bg-gray-100/70 dark:bg-gray-800/40 w-full" data-v-0553dd2d> GSoC&#39;25 Week-7 Update </p><p class="mb-3 sm:mb-4 text-sm sm:text-base md:text-base lg:text-lg leading-6 sm:leading-7 md:leading-7 tracking-[0.01em] sm:tracking-[0.015em] text-wrap-pretty max-w-full sm:max-w-[95%] md:max-w-[90%]" data-v-0553dd2d> This week focused heavily on <strong data-v-0553dd2d>code cleanup</strong>, particularly refining <strong data-v-0553dd2d>type annotations</strong> and ensuring <strong data-v-0553dd2d>method consistency</strong>. While progress was slower than anticipated due to my programming exam, I&#39;ve made significant strides towards completing my current Pull Request. </p><p class="mb-4 sm:mb-6 text-sm sm:text-base md:text-base lg:text-lg leading-6 sm:leading-7 md:leading-7 tracking-[0.01em] sm:tracking-[0.015em] text-wrap-pretty max-w-full sm:max-w-[95%] md:max-w-[90%]" data-v-0553dd2d> A key development this week was the merge of <a href="https://github.com/sympy/sympy/pull/28236" target="_blank" class="text-blue-600 dark:text-blue-400 hover:underline font-medium" data-v-0553dd2d> gh-28236 </a> by <strong data-v-0553dd2d>Oscar</strong>. This PR introduces enhanced type annotation functionality for <span class="font-mono bg-gray-100 dark:bg-gray-800 px-1 rounded" data-v-0553dd2d>dup</span> elements, providing a <strong data-v-0553dd2d><span class="font-mono bg-gray-100 dark:bg-gray-800 px-1 rounded" data-v-0553dd2d>dup</span> type alias</strong>. I&#39;m currently evaluating how extensively to integrate this new alias, replacing generic list types for improved clarity and type checker compatibility. </p><hr class="my-6 border-gray-300 dark:border-gray-600" data-v-0553dd2d>',4)),t("div",b,[e[2]||(e[2]=t("h2",{class:"font-bold text-lg sm:text-xl md:text-2xl mb-4"}," Series Division Implementation ",-1)),e[3]||(e[3]=t("p",{class:"mb-3 sm:mb-4 text-sm sm:text-base md:text-base lg:text-lg leading-6 sm:leading-7 md:leading-7 tracking-[0.01em] sm:tracking-[0.015em] text-wrap-pretty max-w-full sm:max-w-[95%] md:max-w-[90%]"},[a(" The major new feature implemented this week is the "),t("strong",null,"division operation for series"),a(". This proved to be a particularly tricky challenge. Typically, series division is performed by inverting the divisor and then multiplying. For example, to find "),t("span",{class:"italic"},"s₁ / s₂"),a(": ")],-1)),t("div",{class:n(["rounded-lg p-4 mb-4 border-l-4 border-blue-500",{"bg-gray-50":d(s).theme==="light","bg-gray-900":d(s).theme==="dark"}])},e[0]||(e[0]=[r('<ol class="list-decimal list-inside space-y-2 text-sm sm:text-base" data-v-0553dd2d><li data-v-0553dd2d> Calculate the inverse of <span class="italic" data-v-0553dd2d>s₂</span>: <span class="italic" data-v-0553dd2d>H = 1/s₂</span>. </li><li data-v-0553dd2d> Multiply <span class="italic" data-v-0553dd2d>s₁</span> by <span class="italic" data-v-0553dd2d>H</span>: <span class="italic" data-v-0553dd2d>s₁ × H</span>. </li></ol>',1)]),2),e[4]||(e[4]=t("p",{class:"mb-3 sm:mb-4 text-sm sm:text-base md:text-base lg:text-lg leading-6 sm:leading-7 md:leading-7 tracking-[0.01em] sm:tracking-[0.015em] text-wrap-pretty max-w-full sm:max-w-[95%] md:max-w-[90%]"},[a(" The primary hurdle arose when the divisor ("),t("span",{class:"italic"},"s₂"),a(") lacked an invertible constant term, as is common with series like "),t("span",{class:"font-mono bg-gray-100 dark:bg-gray-800 px-1 rounded"},"x"),a(" or "),t("span",{class:"font-mono bg-gray-100 dark:bg-gray-800 px-1 rounded"},"x + x² + x³ + ..."),a(". I initially overcomplicated this, focusing on the absence of a constant term and potential series shifts. ")],-1)),t("div",{class:n(["rounded-lg p-4 mb-4 border-l-4 border-green-500",{"bg-green-50":d(s).theme==="light","bg-green-900/20":d(s).theme==="dark"}])},[t("p",{class:n(["font-semibold mb-2 text-md",{"text-green-800":d(s).theme==="light","text-green-300":d(s).theme==="dark"}])}," Solution Found ",2),t("p",{class:n(["text-xs sm:text-sm",{"text-green-700":d(s).theme==="light","text-green-200":d(s).theme==="dark"}])},e[1]||(e[1]=[a(" However, the solution was simpler: the key is to "),t("strong",null,"synchronize the shift of s₁ with s₂",-1),a(" to ensure mathematical correctness in the operation. This adjustment allows for accurate division even in cases where the constant term is missing. ")]),2)],2),e[5]||(e[5]=t("p",{class:"text-sm sm:text-base md:text-base lg:text-lg leading-6 sm:leading-7 md:leading-7 tracking-[0.01em] sm:tracking-[0.015em] text-wrap-pretty max-w-full sm:max-w-[95%] md:max-w-[90%]"}," With a few remaining checks and minor adjustments, I'm optimistic about getting this PR merged today or tomorrow. ",-1))]),e[7]||(e[7]=t("div",{class:"mt-8 pt-4 border-t border-gray-200 dark:border-gray-700"},[t("p",{class:"text-xs sm:text-sm text-gray-500 dark:text-gray-400 italic text-center"}," Week 7 of Google Summer of Code 2025 with SymPy ")],-1))]))}}),k=x(y,[["__scopeId","data-v-0553dd2d"]]);export{k as default};
